SIM_power_ALU.c:int SIM_power_ALU_init(SIM_power_ALU_t *alu, int model, u_int data_width)
SIM_power_ALU.c:         assert(data_width && !(data_width % 8));
SIM_power_ALU.c:	 alu->data_width = data_width;
SIM_power_ALU.c:	 d_H8 = SIM_power_Hamming_group(d1, d1_old, d2, d2_old, 8, alu->data_width / 8);
SIM_power_ALU.c:	   d_H8 = SIM_power_Hamming_group(d1, alu->l_d1, d2, alu->l_d2, 8, alu->data_width / 8);
SIM_power_ALU.c:	   d_H16 = SIM_power_Hamming_group(d1, alu->a_d1, d2, alu->a_d2, 16, MAX(1, alu->data_width / 16));
SIM_power_ALU.c:	   d_H8 = SIM_power_Hamming_group(d1, alu->a_d1, d2, alu->a_d2, 8, alu->data_width / 8);
SIM_power_ALU.c:	   d_H4 = SIM_power_Hamming_group(d1, alu->a_d1, d2, alu->a_d2, 4, alu->data_width / 4);
SIM_power_ALU.c:    d_H4 = alu->data_width / 4;
SIM_power_ALU.c:    d_H8 = alu->data_width / 8;
SIM_power_ALU.c:    d_H16 = MAX(1, alu->data_width / 16);
SIM_power_ALU.c:    d_H4 = alu->data_width / 4 * (1 - 1.0 / (BIGONE << 8));
SIM_power_ALU.c:    d_H8 = alu->data_width / 8 * (1 - 1.0 / (BIGONE << 16));
SIM_power_ALU.c:    d_H16 = MAX(1, alu->data_width / 16) * (1 - 1.0 / (BIGONE << 32));
SIM_power_array_l.c: *   n_bits -- decoder width
SIM_power_array_l.c: *   tx_width       -- width of pass transistor
SIM_power_array_l.c:static double SIM_array_wordline_cap( u_int cols, double wire_cap, double tx_width )
SIM_power_array_l.c:  Ctotal = Cline = SIM_power_gatecappass( tx_width, BitWidth / 2 - tx_width ) * cols + wire_cap;
SIM_power_array_l.c: *   pre_size      -- width of precharge transistors
SIM_power_array_l.c:static double SIM_array_outdrv_select_cap( u_int data_width )
SIM_power_array_l.c:  Ctotal += data_width *( SIM_power_gatecap( Woutdrvnandn, 1 ) + SIM_power_gatecap( Woutdrvnandp, 1 ) +
SIM_power_array_l.c:static int SIM_array_outdrv_init( SIM_power_out_t *outdrv, int model, u_int item_width )
SIM_power_array_l.c:    outdrv->item_width = item_width;
SIM_power_array_l.c:    outdrv->out_mask = HAMM_MASK(item_width);
SIM_power_array_l.c:    outdrv->e_select = SIM_array_outdrv_select_cap( item_width ) * EnergyFactor;
SIM_power_array_l.c:  outdrv->n_out_0 += outdrv->item_width - n_1;
SIM_power_array_l.c:/* WHS: use Wmemcella and Wmemcellbscale to compute tx width of memory cell */
SIM_power_array_l.c:inline int SIM_array_mem_record( SIM_power_mem_t *mem, LIB_Type_max_uint prev_value, LIB_Type_max_uint curr_value, u_int width )
SIM_power_array_l.c:  mem->n_switch += SIM_power_Hamming( prev_value, curr_value, HAMM_MASK(width));
SIM_power_array_l.c:static double SIM_array_pre_cap( double width, double length )
SIM_power_array_l.c:  return SIM_power_gatecap( width, length );
SIM_power_array_l.c:  u_int rows, cols, ports, dec_width, n_bitline_pre, n_colsel_pre;
SIM_power_array_l.c:  info->data_arr_width = 0;
SIM_power_array_l.c:  info->tag_arr_width = 0;
SIM_power_array_l.c:  if (dec_width = SIM_power_logtwo(info->n_set)) {
SIM_power_array_l.c:    SIM_array_dec_init( &arr->row_dec, info->row_dec_model, dec_width );
SIM_power_array_l.c:    info->data_arr_width = wordline_len;
SIM_power_array_l.c:    info->data_arr_width = wordline_len;
SIM_power_array_l.c:  if (dec_width = SIM_power_logtwo(info->n_item)) { 
SIM_power_array_l.c:    SIM_array_dec_init( &arr->col_dec, info->col_dec_model, dec_width );
SIM_power_array_l.c:  SIM_array_outdrv_init( &arr->outdrv, info->outdrv_model, info->data_width );
SIM_power_array_l.c:      cols = info->tag_line_width * info->assoc * info->tag_nspd / info->tag_ndwl;
SIM_power_array_l.c:      info->tag_arr_width = wordline_len;
SIM_power_array_l.c:      cols = info->tag_addr_width;
SIM_power_array_l.c:      info->tag_arr_width = wordline_len;
SIM_power_array_l.c:    SIM_array_comp_init( &arr->comp, info->comp_model, info->tag_addr_width, info->assoc, n_pre_drain( info->comp_pre_model ), matchline_len, tagline_len );
SIM_power_array_m.c:#define HAVE_USE_BIT( info )		((info)->use_bit_width)
SIM_power_array_m.c:    /* there is some subtlety here: write width may not be as wide as block size,
SIM_power_array_m.c:      SIM_array_mem_record( tag_attach_mem, set->use_bak[i], (*info->get_set_use_bit)( set->entry_set, i ), info->use_bit_width );
SIM_power_array_m.c:    SIM_array_mem_record( tag_attach_mem, set->valid_bak, (*info->get_entry_valid_bit)( set->entry ), info->valid_bit_width );
SIM_power_array_m.c:    SIM_array_mem_record( &arr->tag_mem, set->tag_bak, curr_tag, info->tag_addr_width );
SIM_power_array_m.c:  u_int NP_width, NC_width, cnt_width;
SIM_power_array_m.c:    NP_width = NC_width = SIM_power_logtwo(info->n_set);
SIM_power_array_m.c:    cnt_width = 0;
SIM_power_array_m.c:      Eatomic += arr->data_bitline.e_col_read * (NP_width + NC_width + cnt_width) * n_read;
SIM_power_array_m.c:      Eatomic += arr->data_bitline.e_col_read * (NP_width + NC_width + cnt_width) * n_write;
SIM_power_array_m.c:      Eatomic += arr->data_bitline.e_col_read * (NP_width + NC_width) * (max_avg ? 1 : 0.5) * n_read;
SIM_power_array_m.c:      Eatomic += arr->data_bitline.e_col_read * (NP_width + NC_width) * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:  Eatomic = arr->data_bitline.e_col_write * info->data_width * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:    Eatomic += arr->data_bitline.e_col_write * (NP_width + NC_width) * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:    Eatomic += arr->data_bitline.e_col_write * NP_width * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:    Eatomic += arr->data_bitline.e_col_write * NC_width * (max_avg ? 1 : 0.5) * n_read;
SIM_power_array_m.c:    Eatomic += arr->data_bitline_pre.e_charge * (NP_width + NC_width + cnt_width) * n_read;
SIM_power_array_m.c:    Eatomic += arr->data_bitline_pre.e_charge * (NP_width + NC_width + cnt_width) * n_write;
SIM_power_array_m.c:  Eatomic = arr->data_mem.e_switch * info->data_width * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:    Eatomic += arr->data_mem.e_switch * (NP_width + NC_width) * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:    Eatomic += arr->data_mem.e_switch * NP_width * (max_avg ? 1 : 0.5) * n_write;
SIM_power_array_m.c:    Eatomic += arr->data_mem.e_switch * NC_width * (max_avg ? 1 : 0.5) * n_read;
SIM_power_array_m.c:      Eatomic += arr->data_amp.e_access * (NP_width + NC_width + cnt_width) * n_read;
SIM_power_array_m.c:      Eatomic += arr->data_amp.e_access * (NP_width + NC_width + cnt_width) * n_write;
SIM_power_array_m.c:    Eatomic = arr->outdrv.e_chg_data * arr->outdrv.item_width * (max_avg ? 1 : 0.5) * info->n_item * info->assoc * n_read;
SIM_power_array_m.c:      Eatomic = arr->outdrv.e_out_1 * arr->outdrv.item_width * (max_avg ? 1 : 0.5) * n_read;
SIM_power_array_m.c:      Eatomic = arr->outdrv.e_out_0 * arr->outdrv.item_width * (max_avg ? 1 : 0.5) * n_read;
SIM_power_cam.c:double SIM_cam_wordline_cap( u_int cols, double wire_cap, double tx_width )
SIM_power_cam.c:  Ctotal = Cline = SIM_power_gatecappass( tx_width, 2 ) * cols + wire_cap;
SIM_power_cam.c:/* WHS: use Wmemcella and Wmemcellbscale to compute tx width of memory cell */
SIM_power_clock.c:  int npreg_width = SIM_power_logtwo(PARM(RUU_size));
SIM_power_clock.c:  num_piperegs = PARM(ruu_issue_width)*PARM(inst_length) + PARM(data_width);
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(PARM(inst_length) + 3 * PARM(RUU_size));
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(PARM(inst_length) + 3 * PARM(RUU_size));
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(3 * npreg_width + (BIGONE << PARM(opcode_length)));
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(2*PARM(data_width) + (BIGONE << PARM(opcode_length)));
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(PARM(data_width) + (BIGONE << PARM(opcode_length)));
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(PARM(data_width) + (BIGONE << PARM(opcode_length)));
SIM_power_clock.c:  num_piperegs += PARM(ruu_issue_width)*(PARM(data_width) + (BIGONE << PARM(opcode_length)));
SIM_power_misc.c:  // num_comparators = (PARM(ruu_decode_width) - 1) * (PARM(ruu_decode_width));
SIM_power_misc.c:static double SIM_iwin_sel_anyreq_cap(u_int width)
SIM_power_misc.c:  Ctotal += width * SIM_power_draincap(WSelORn, NCH, 1);
SIM_power_misc.c:static double SIM_iwin_sel_grant_cap(u_int width)
SIM_power_misc.c:  Ctotal += width * SIM_power_gatecap(WSelEnn + WSelEnp, 20); 
SIM_power_misc.c:static int SIM_iwin_sel_init(SIM_power_sel_t *sel, int model, u_int width)
SIM_power_misc.c:    sel->width = width;
SIM_power_misc.c:    for (i = 0; i < width; i++)
SIM_power_misc.c:    sel->e_anyreq = SIM_iwin_sel_anyreq_cap(width) * EnergyFactor;
SIM_power_misc.c:    sel->e_grant = SIM_iwin_sel_grant_cap(width);
SIM_power_misc.c:    for (i = 0; i < width; i++)
SIM_power_misc.c:    for (i = 0; i < sel->width; i++) {
SIM_power_misc.c:        sel->n_chgreq += sel->width - i;
SIM_power_misc.c:  for (i = 0; i < sel->width; i++)
SIM_power_misc.c:  // Ctotal += PARM(ruu_issue_width) * num_arbiter*(Cor+Cpencode);
SIM_power_misc.c:static int SIM_bus_bitwidth(int encoding, u_int data_width, u_int grp_width)
SIM_power_misc.c:      case TRANS_ENC:	return data_width;
SIM_power_misc.c:      case BUSINV_ENC:	return data_width + data_width / grp_width + (data_width % grp_width ? 1:0);
SIM_power_misc.c: * only correct when grp_width divides data_width
SIM_power_misc.c:  u_int done_width = 0;
SIM_power_misc.c:         mask_data = (BIGONE << bus->grp_width) - 1;
SIM_power_misc.c:	 while (bus->data_width > done_width) {
SIM_power_misc.c:	   if (SIM_power_Hamming(old_state & mask_bus, new_data & mask_data, mask_bus) > bus->grp_width / 2)
SIM_power_misc.c:	     new_state += (~(new_data & mask_data) & mask_bus) << done_width + done_width / bus->grp_width;
SIM_power_misc.c:	     new_state += (new_data & mask_data) << done_width + done_width / bus->grp_width;
SIM_power_misc.c:	   done_width += bus->grp_width;
SIM_power_misc.c:	   old_state >>= bus->grp_width + 1;
SIM_power_misc.c:	   new_data >>= bus->grp_width;
SIM_power_misc.c:  reg_height = PARM(RUU_size) * (RegCellHeight + WordlineSpacing * 3 * PARM(ruu_issue_width)); 
SIM_power_misc.c: * grp_width only matters for BUSINV_ENC
SIM_power_misc.c:int SIM_bus_init(SIM_power_bus_t *bus, int model, int encoding, u_int width, u_int grp_width, u_int n_snd, u_int n_rcv, double length, double time)
SIM_power_misc.c:    bus->data_width = width;
SIM_power_misc.c:    bus->grp_width = grp_width;
SIM_power_misc.c:	     if (!grp_width || grp_width > width)
SIM_power_misc.c:	       bus->grp_width = width;
SIM_power_misc.c:    bus->bit_width = SIM_bus_bitwidth(bus->encoding, width, bus->grp_width);
SIM_power_misc.c:    bus->bus_mask = HAMM_MASK(bus->bit_width);
SIM_power_misc.c:    // npreg_width = SIM_power_logtwo(PARM(RUU_size));
SIM_power_misc.c:    /* assume ruu_issue_width result busses -- power can be scaled linearly
SIM_power_misc.c:    // bus->static_af = 2 * (PARM(data_width) + npreg_width) * PARM(ruu_issue_width) * PARM(AF);
SIM_power_permu.c:inline static LIB_Type_max_uint SIM_omflip_omega(LIB_Type_max_uint in, u_int width, LIB_Type_max_uint mask, int pass, LIB_Type_max_uint ctr)
SIM_power_permu.c:    high_in = (in >> width) & mask;
SIM_power_permu.c:    for (i = 0; i < width; i++) {
SIM_power_permu.c:inline static LIB_Type_max_uint SIM_omflip_flip(LIB_Type_max_uint in, u_int width, int pass, LIB_Type_max_uint ctr)
SIM_power_permu.c:    for (i = 0; i < width; i++) {
SIM_power_permu.c:    return low_out + (high_out << width);
SIM_power_permu.c:  /* WHS: 2 tracks per unit width */
SIM_power_permu.c:int SIM_permu_init(SIM_power_permu_t *permu, int model, u_int data_width)
SIM_power_permu.c:  double unit_dist = 1.5 * data_width * BitlineSpacing;
SIM_power_permu.c:  assert(data_width && data_width <= 8 * sizeof(LIB_Type_max_uint) && !(data_width % 2));
SIM_power_permu.c:	 permu->u.omflip.data_width = data_width;
SIM_power_permu.c:	 permu->u.omflip.data_mask = HAMM_MASK(data_width);
SIM_power_permu.c:	 permu->u.omflip.ctr_mask = HAMM_MASK(data_width / 2);
SIM_power_permu.c:	 permu->u.omflip.e_chg_in = SIM_omflip_in_cap(unit_dist + (0.5 + 0.25 * data_width) * unit_height) / 2 * EnergyFactor;
SIM_power_permu.c:	 permu->u.omflip.e_chg_stg = SIM_omflip_stg_cap(unit_dist + (0.5 + 1.25 * data_width) * WordlineSpacing) / 2 * EnergyFactor;
SIM_power_permu.c:	 permu->u.omflip.e_chg_pass = SIM_omflip_ctr_cap(data_width, data_width * unit_height) / 2 * EnergyFactor;
SIM_power_permu.c:	 permu->u.omflip.e_chg_ctr = SIM_omflip_ctr_cap(2, data_width * unit_height / 2) / 2 * EnergyFactor;
SIM_power_permu.c:	 permu->u.grp.data_width = data_width;
SIM_power_permu.c:	 permu->u.grp.n_stg = SIM_power_logtwo(data_width);
SIM_power_permu.c:	 permu->u.grp.mask = HAMM_MASK(data_width);
SIM_power_permu.c:    stg = SIM_omflip_omega(in, omflip->data_width / 2, omflip->ctr_mask, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_omega(in, omflip->data_width / 2, omflip->ctr_mask, 1, 0);
SIM_power_permu.c:      ctr = (op >> omflip->data_width / 2) & omflip->ctr_mask;
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 1, 0);
SIM_power_permu.c:    ctr = (op >> omflip->data_width / 2) & omflip->ctr_mask;
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 1, 0);
SIM_power_permu.c:    ctr = (op >> omflip->data_width / 2) & omflip->ctr_mask;
SIM_power_permu.c:    stg = SIM_omflip_omega(stg, omflip->data_width / 2, omflip->ctr_mask, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_omega(stg, omflip->data_width / 2, omflip->ctr_mask, 1, 0);
SIM_power_permu.c:    stg = SIM_omflip_omega(in, omflip->data_width / 2, omflip->ctr_mask, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_omega(in, omflip->data_width / 2, omflip->ctr_mask, 1, 0);
SIM_power_permu.c:      ctr = (op >> omflip->data_width / 2) & omflip->ctr_mask;
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 1, 0);
SIM_power_permu.c:    ctr = (op >> omflip->data_width / 2) & omflip->ctr_mask;
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_flip(stg, omflip->data_width / 2, 1, 0);
SIM_power_permu.c:    ctr = (op >> omflip->data_width / 2) & omflip->ctr_mask;
SIM_power_permu.c:    stg = SIM_omflip_omega(stg, omflip->data_width / 2, omflip->ctr_mask, 0, ctr);
SIM_power_permu.c:    stg = SIM_omflip_omega(stg, omflip->data_width / 2, omflip->ctr_mask, 1, 0);
SIM_power_permu.c:inline static LIB_Type_max_uint SIM_grp_stg(LIB_Type_max_uint zin, u_int *lin, u_int width, u_int stg, int zw)
SIM_power_permu.c:  for (i = 0; i < width >> stg; i++) {
SIM_power_permu.c:  for (i = 0; i < grp->data_width / 2; i++) {
SIM_power_permu.c:  zin = SIM_grp_stg(zin, lin, grp->data_width, 1, ZBIT);
SIM_power_permu.c:  win = SIM_grp_stg(win, lin, grp->data_width, 1, WBIT);
SIM_power_permu.c:  for (stg = 2; 1 << stg <= grp->data_width; stg++) {
SIM_power_permu.c:    for (i = 0; i < grp->data_width >> stg; i++) {
SIM_power_permu.c:    zin = SIM_grp_stg(zin, lin, grp->data_width, stg, ZBIT);
SIM_power_permu.c:    win = SIM_grp_stg(win, lin, grp->data_width, stg, WBIT);
SIM_power_permu.c:  zin += win << grp->data_width - lin[0] - rin[0];
SIM_power_permu.c:  for (i = 0; i < grp->data_width / 2; i++) {
SIM_power_permu.c:  zin = SIM_grp_stg(zin, lin, grp->data_width, 1, ZBIT);
SIM_power_permu.c:  win = SIM_grp_stg(win, lin, grp->data_width, 1, WBIT);
SIM_power_permu.c:  for (stg = 2; 1 << stg <= grp->data_width; stg++) {
SIM_power_permu.c:    for (i = 0; i < grp->data_width >> stg; i++) {
SIM_power_permu.c:    zin = SIM_grp_stg(zin, lin, grp->data_width, stg, ZBIT);
SIM_power_permu.c:    win = SIM_grp_stg(win, lin, grp->data_width, stg, WBIT);
SIM_power_permu.c:  zin += win << grp->data_width - lin[0] - rin[0];
SIM_power_permu.c:         Emax += permu->u.omflip.e_chg_in * permu->u.omflip.data_width;
SIM_power_permu.c:         Emax += permu->u.omflip.e_chg_stg * permu->u.omflip.data_width * 3;
SIM_power_permu.c:         Emax += permu->u.omflip.e_chg_int * permu->u.omflip.data_width * 4;
SIM_power_permu.c:         Emax += permu->u.omflip.e_chg_out * permu->u.omflip.data_width;
SIM_power_permu.c:         Emax += permu->u.omflip.e_chg_ctr * permu->u.omflip.data_width;
SIM_power_permu.c:	 //Emax += permu->u.grp.e_chg_in * permu->u.grp.data_width;
SIM_power_permu.c:	   Emax += permu->u.grp.e_chg_zin[i] * permu->u.grp.data_width * 2;
SIM_power_permu.c:	   Emax += permu->u.grp.e_chg_lin[i] * (permu->u.grp.data_width >> i + 1);
SIM_power_permu.c:	   Emax += permu->u.grp.e_chg_rin[i] * (permu->u.grp.data_width >> i + 1);
SIM_power_permu.c:	 Emax += permu->u.grp.e_chg_oin * permu->u.grp.data_width * 2;
SIM_power_permu.c:	 //Emax += permu->u.grp.e_chg_out * permu->u.grp.data_width;
SIM_power_router.c:static double SIM_crossbar_ctr_cap(double length, u_int data_width, int prev_ctr, int next_ctr, u_int degree, int connect_type, int trans_type)
SIM_power_router.c:  Ctotal += data_width * Cgate;
SIM_power_router.c:int SIM_crossbar_init(SIM_power_crossbar_t *crsbar, int model, u_int n_in, u_int n_out, u_int data_width, u_int degree, int connect_type, int trans_type, double in_len, double out_len, double *req_len)
SIM_power_router.c:    crsbar->data_width = data_width;
SIM_power_router.c:    crsbar->mask = HAMM_MASK(data_width);
SIM_power_router.c:	   in_length = n_out * data_width * CrsbarCellWidth;
SIM_power_router.c:	   out_length = n_in * data_width * CrsbarCellHeight;
SIM_power_router.c:	   crsbar->e_chg_ctr = SIM_crossbar_ctr_cap(ctr_length, data_width, 0, 0, 0, connect_type, trans_type) * EnergyFactor;
SIM_power_router.c:	   in_length = n_in * data_width * CrsbarCellWidth * (n_out / 2);
SIM_power_router.c:	   in_length = n_in * data_width * (5 * Lamda) * (n_out / 2);
SIM_power_router.c:	   ctr_length = n_in * data_width * CrsbarCellWidth * (n_out / 2) / 2;
SIM_power_router.c:	     crsbar->e_chg_ctr = SIM_crossbar_ctr_cap(ctr_length, data_width, 0, 0, degree, connect_type, trans_type) * EnergyFactor;
SIM_power_router.c:	     crsbar->e_chg_ctr = SIM_crossbar_ctr_cap(ctr_length, data_width, 0, 1, degree, connect_type, trans_type) * EnergyFactor +
SIM_power_router.c:	                         SIM_crossbar_ctr_cap(0, data_width, 1, 0, degree, connect_type, trans_type) * EnergyFactor;
SIM_power_router.c:	       crsbar->e_chg_ctr += (crsbar->depth - 2) * SIM_crossbar_ctr_cap(0, data_width, 1, 1, degree, connect_type, trans_type) * EnergyFactor;
SIM_power_router.c:         Eatomic = crsbar->e_chg_in * crsbar->data_width * (max_avg ? 1 : 0.5) * n_data;
SIM_power_router.c:         Eatomic = crsbar->e_chg_out * crsbar->data_width * (max_avg ? 1 : 0.5) * n_data;
SIM_power_router.c:	   Eatomic = crsbar->e_chg_int * crsbar->data_width * (crsbar->depth - 1) * (max_avg ? 1 : 0.5) * n_data;
SIM_power_router.c:static double SIM_matrix_arbiter_req_cap(u_int req_width, double length)
SIM_power_router.c:  Ctotal += (req_width - 1) * SIM_power_gatecap(WdecNORn + WdecNORp, 0);
SIM_power_router.c:static double SIM_matrix_arbiter_pri_cap(u_int req_width)
SIM_power_router.c:static double SIM_matrix_arbiter_grant_cap(u_int req_width)
SIM_power_router.c:  return (req_width * SIM_power_draincap(WdecNORn, NCH, 1) + SIM_power_draincap(WdecNORp, PCH, req_width));
SIM_power_router.c:int SIM_arbiter_init(SIM_power_arbiter_t *arb, int arbiter_model, int ff_model, u_int req_width, double length, SIM_power_array_info_t *info)
SIM_power_router.c:    arb->req_width = req_width;
SIM_power_router.c:    arb->mask = HAMM_MASK(req_width);
SIM_power_router.c:	   arb->e_chg_req = SIM_matrix_arbiter_req_cap(req_width, length) / 2 * EnergyFactor;
SIM_power_router.c:	   arb->e_chg_grant = SIM_matrix_arbiter_grant_cap(req_width) * EnergyFactor;
SIM_power_router.c:	   if (SIM_fpfp_init(&arb->pri_ff, ff_model, SIM_matrix_arbiter_pri_cap(req_width)))
SIM_power_router.c:	 arb->n_chg_mint += (arb->req_width - 1) * arb->req_width / 2;
SIM_power_router.c:	 arb->pri_ff.n_switch += (arb->req_width - 1) / 2;
SIM_power_router.c:	 arb->n_chg_carry += arb->req_width / 2;
SIM_power_router.c:	 arb->n_chg_carry_in += arb->req_width / 2 - 1;
SIM_power_router.c:  if (n_req > arb->req_width) {
SIM_power_router.c:    n_req = arb->req_width;
SIM_power_router.c:	 Eatomic = arb->e_chg_carry * arb->req_width * (max_avg ? 1 : 0.5) * n_grant;
SIM_power_router.c:	 Eatomic = arb->e_chg_carry_in * (arb->req_width * (max_avg ? 1 : 0.5) - 1) * n_grant;
SIM_power_router.c:	 Eatomic = arb->pri_ff.e_keep_0 * (arb->req_width - 2 * n_grant);
SIM_power_router.c:	 Eatomic = arb->pri_ff.e_clock * arb->req_width;
SIM_power_router.c:	 total_pri = arb->req_width * (arb->req_width - 1) * 0.5;
SIM_power_router.c:	 n_chg_pri = (arb->req_width - 1) * (max_avg ? 1 : 0.5);
SIM_power_router.c:	   Eatomic = arb->e_chg_mint * (MIN(n_req, arb->req_width * 0.5) + 2) * (arb->req_width - 1);
SIM_power_router.c:	   Eatomic = arb->e_chg_mint * (n_req + 1) * (arb->req_width - 1) * 0.5;
SIM_power_router.c:  double cbuf_width, req_len = 0;
SIM_power_router.c:    SIM_crossbar_init(&router->crossbar, info->crossbar_model, info->n_switch_in, info->n_switch_out, info->flit_width, info->degree, info->connect_type, info->trans_type, info->crossbar_in_len, info->crossbar_out_len, &req_len);
SIM_power_router.c:    /* MUST initialize array before crossbar because the latter needs array width */
SIM_power_router.c:    cbuf_width = info->central_buf_info.data_arr_width + info->central_buf_info.tag_arr_width;
SIM_power_router.c:    SIM_crossbar_init(&router->in_cbuf_crsbar, MATRIX_CROSSBAR, info->n_switch_in, info->pipe_depth * info->central_buf_info.write_ports, info->flit_width, 0, info->connect_type, info->trans_type, cbuf_width, 0, NULL);
SIM_power_router.c:    SIM_crossbar_init(&router->out_cbuf_crsbar, MATRIX_CROSSBAR, info->pipe_depth * info->central_buf_info.read_ports, info->n_switch_out, info->flit_width, 0, info->connect_type, info->trans_type, 0, cbuf_width, NULL);
SIM_power_router.c: * 		e_cbuf_wrt = e_cbuf_fin / (pipe_depth * pipe_width)
SIM_power_router.c:  e_cbuf_rw         = e_cbuf_fin * info->flit_width / info->central_buf_info.blk_bits;
SIM_power_time.c:double SIM_power_gatecap(width,wirelength) /* returns gate capacitance in Farads */
SIM_power_time.c:double width;		/* gate width in um (length is Leff) */
SIM_power_time.c:  overlapCap = (width - 2*Pdelta_w) * PCov;
SIM_power_time.c:  gateCap  = ((width - 2*Pdelta_w) * (l * LSCALE - 2*Pdelta_l) *
SIM_power_time.c:  return(width*Leff*PARM(Cgate)+wirelength*Cpolywire*Leff);
SIM_power_time.c:  /* return(width*Leff*PARM(Cgate)); */
SIM_power_time.c:  /* return(width*CgateLeff+wirelength*Cpolywire*Leff);*/
SIM_power_time.c:double SIM_power_gatecappass(width,wirelength) /* returns gate capacitance in Farads */
SIM_power_time.c:double width;           /* gate width in um (length is Leff) */
SIM_power_time.c:  return(SIM_power_gatecap(width,wirelength));
SIM_power_time.c:  /* return(width*Leff*PARM(Cgatepass)+wirelength*Cpolywire*Leff); */
SIM_power_time.c:double SIM_power_draincap(width,nchannel,stack)  /* returns drain cap in Farads */
SIM_power_time.c:double width;		/* um */
SIM_power_time.c:  diffArea = l * width;
SIM_power_time.c:  diffPeri = 2 * l + 2 * width;
SIM_power_time.c:    overlapCap = (width - 2 * Pdelta_w) * PCov;
SIM_power_time.c:    swAreaUnderGate = (width - 2 * Pdelta_w) * PCjswA;
SIM_power_time.c:    overlapCap = (width - 2 * Ndelta_w) * NCov;
SIM_power_time.c:    swAreaUnderGate = (width - 2 * Ndelta_w) * NCjswA;
SIM_power_time.c:	if (width >= 10) {
SIM_power_time.c:	    cap = 3.0*Leff*width/2.0*Cdiffarea + 6.0*Leff*Cdiffside +
SIM_power_time.c:		width*Coverlap;
SIM_power_time.c:	    cap += (double)(stack-1)*(Leff*width*Cdiffarea +
SIM_power_time.c:		4.0*Leff*Cdiffside + 2.0*width*Coverlap);
SIM_power_time.c:	    cap = 3.0*Leff*width*Cdiffarea + (6.0*Leff+width)*Cdiffside +
SIM_power_time.c:		width*Coverlap;
SIM_power_time.c:	    cap += (double)(stack-1)*(Leff*width*Cdiffarea +
SIM_power_time.c:		2.0*Leff*Cdiffside + 2.0*width*Coverlap);
SIM_power_time.c:double SIM_power_transresswitch(width,nchannel,stack)  /* returns resistance in ohms */
SIM_power_time.c:double width;		/* um */
SIM_power_time.c:	return((1.0+((stack-1.0)*0.8))*restrans/width);	
SIM_power_time.c:double SIM_power_transreson(width,nchannel,stack)  /* returns resistance in ohms */
SIM_power_time.c:double width;           /* um */
SIM_power_time.c:        return(stack*restrans/width);
SIM_power_time.c: * the transistor width that would have this R.  It is used in the
SIM_power_time.c:double SIM_power_restowidth(res,nchannel)  /* returns width in um */
SIM_power_time.c:        psize = SIM_power_restowidth(Rpdrive,PCH);
SIM_power_time.c:        double aspectRatio;     /* as height over width */
SIM_power_util.c:u_int SIM_power_Hamming_group(LIB_Type_max_uint d1_new, LIB_Type_max_uint d1_old, LIB_Type_max_uint d2_new, LIB_Type_max_uint d2_old, u_int width, u_int n_grp)
SIM_power_util.c:  mask = HAMM_MASK(width);
SIM_power_util.c:    d1_new >>= width;
SIM_power_util.c:    d1_old >>= width;
SIM_power_util.c:    d2_new >>= width;
SIM_power_util.c:    d2_old >>= width;
SIM_power_util.c:  psize = SIM_power_restowidth(Rpdrive,PCH);
SIM_power_util.c:  nsize = SIM_power_restowidth(Rpdrive,NCH);
SIM_power_util.c:  fprintf(stderr, "memory cell read access transistor width: %gum\n", Wmemcellr);
SIM_power_util.c:  fprintf(stderr, "memory cell write access transistor width: %gum\n", Wmemcellw);
SIM_power_util.c:  fprintf(stderr, "memory cell inverter PMOS transistor width: %gum\n", Wmemcella);
SIM_power_util.c:  fprintf(stderr, "memory cell inverter NMOS transistor width: %gum\n", Wmemcella * Wmemcellbscale);
SIM_power_util.c:  fprintf(stderr, "memory cell width: %gum\n", RegCellWidth);
SIM_reg_power.c:  info->blk_bits = PARM(reg_width);
SIM_reg_power.c:  info->data_width = PARM(reg_width);
SIM_reg_power.c:  info->n_item = info->blk_bits / info->data_width;
SIM_router_power.c:static int SIM_buf_set_para(SIM_power_array_info_t *info, int share_buf, u_int n_read_port, u_int n_write_port, u_int n_entry, u_int line_width, int outdrv)
SIM_router_power.c:  info->blk_bits = line_width;
SIM_router_power.c:  info->data_width = line_width;
SIM_router_power.c:  info->n_item = info->blk_bits / info->data_width;
SIM_router_power.c:  u_int line_width;
SIM_router_power.c:  info->flit_width = PARM(flit_width);
SIM_router_power.c:  SIM_buf_set_para(&info->in_buf_info, info->in_share_buf, PARM(in_buf_rport), 1, PARM(in_buf_set), PARM(flit_width), outdrv);
SIM_router_power.c:  SIM_buf_set_para(&info->cache_in_buf_info, share_buf, PARM(cache_in_buf_rport), 1, PARM(cache_in_buf_set), PARM(flit_width), outdrv);
SIM_router_power.c:  SIM_buf_set_para(&info->mc_in_buf_info, share_buf, PARM(mc_in_buf_rport), 1, PARM(mc_in_buf_set), PARM(flit_width), outdrv);
SIM_router_power.c:  SIM_buf_set_para(&info->io_in_buf_info, share_buf, PARM(io_in_buf_rport), 1, PARM(io_in_buf_set), PARM(flit_width), outdrv);
SIM_router_power.c:  SIM_buf_set_para(&info->out_buf_info, info->out_share_buf, 1, PARM(out_buf_wport), PARM(out_buf_set), PARM(flit_width), 0);
SIM_router_power.c:  SIM_buf_set_para(&info->central_buf_info, 1, PARM(cbuf_rport), PARM(cbuf_wport), PARM(cbuf_set), PARM(cbuf_width) * PARM(flit_width), 0);
SIM_router_power.c:      line_width = SIM_power_logtwo(info->n_total_in - 1);
SIM_router_power.c:      SIM_buf_set_para(&info->out_arb_queue_info, 0, 1, 1, info->n_total_in - 1, line_width, 0);
SIM_router_power.c:  SIM_power_array_data_write(info, arr, NULL, PARM(flit_width) / 8, data_line, old_data, new_data);
